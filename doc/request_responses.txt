+++ Get Users +++
# Request Params
login name
account name
token

# Response Params
list of full names

+++ Authenticate +++

# Request Params
login name
full name
account name

# Response Params

login name
full name
account name
token

+++ Unregister +++

# Request Params
login name
full name
account name
token

# Response Params

login name
full name
account name
token


@Client TODO

- Integrate with Snackbar so we can receive calls from anywhere
- From startCall in TCC start remote expert activity or use the eventbus to trigger the start of it
- decide when to ask for the permissions, probably a good idea to do that on login (or in the activity?)
- Pass bundle to twilio activity with an info on whether a call should be started etc
- Re-check authentication when opening Activity
- Flow is different depending on whether activity is showing (when accepting call)

@ConversationClientListener

- Show snackbar for incoming call and react depending on snackbar action:

            Snackbar.make(rootCoordinatorLayout, String.format(Utils.trans(R.string.x_is_calling), inviter), Snackbar.LENGTH_INDEFINITE)
                    .setAction(Utils.trans(R.string.accept), new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            //User accepted invite
                            acceptIncomingCall(incomingInvite);
                        }
                    }).setCallback(new Snackbar.Callback() {
                @Override
                public void onDismissed(Snackbar snackbar, int event) {
                    super.onDismissed(snackbar, event);
                    switch (event) {
                        case DISMISS_EVENT_CONSECUTIVE:
                        case DISMISS_EVENT_SWIPE:
                        case DISMISS_EVENT_TIMEOUT:
                            //Covers all other acts of dismissal not handled via the standard onclick listener
                            rejectIncomingCall(incomingInvite);
                            break;
                        default:
                            break;
                    }
                }

                @Override
                public void onShown(Snackbar snackbar) {
                    super.onShown(snackbar);
                }
            }).show();

- Show snackbar when invite is rejected due to ongoing call - String.format(Utils.trans(R.string.ignored_invite_by_x_already_in_a_call), inviter)
